const newNoteBtn = document.getElementById('new-note-btn');
const mainContent = document.getElementById('main-content');

function createNewNote() {
  const newNote = document.createElement('div');
  newNote.className = 'newNoteDiv';
  const textArea = document.createElement('textarea');
  newNote.append(textArea);
  mainContent.appendChild(newNote);
  newNoteBtn.removeEventListener('click', createNewNote);
  // Load existing notes from local storage
const existingNotes = JSON.parse(localStorage.getItem('notes')) || [];

// Add new note to existing notes
existingNotes.push(textToSave);

// Save updated notes to local storage
localStorage.setItem('notes', JSON.stringify(existingNotes));

}

newNoteBtn.addEventListener('click', createNewNote);

// Folders
const folders = {
  personal: document.getElementById('Personal'),
  label: document.getElementById('Label'),
  work: document.getElementById('Work'),
  design: document.getElementById('Design Insight'),
  business: document.getElementById('Business')
};

// Add file button
const addFileBtn = document.getElementById('saveFile');
addFileBtn.addEventListener('click', addFile);

function addFile() {
  const textToSave = document.querySelector('.newNoteDiv textarea').value;

  const fileName = prompt('Please enter a file name:', 'note.txt');
  if (fileName !== null) {
    const foldersList = Object.keys(folders);
    const folderName = prompt('Please choose a folder to save the file to:\n\n' + foldersList.join('\n').toUpperCase() + '\n\n', 'Personal');
    const folder = folders[folderName.toLowerCase()];
    if (folder !== undefined) {
      const files = JSON.parse(localStorage.getItem(folderName)) || [];
      if (files.find(file => file.name === fileName)) {
        alert('A file with that name already exists in the folder.');
      } else {
        const newFile = { name: fileName, content: textToSave };
        files.push(newFile);
        localStorage.setItem(folderName, JSON.stringify(files));
        const listItem = createFileListItem(newFile);
        folder.appendChild(listItem);
        console.log('File saved to ' + folderName);
      }
    } else {
      console.log('Folder does not exist.');
    }
  }
}

// Save file button
const saveFileBtn = document.getElementById('saveFile');
saveFileBtn.addEventListener('click', saveFile);

function saveFile() {
  const textToSave = document.querySelector('.newNoteDiv textarea').value;
  const blob = new Blob([textToSave], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);

  const fileName = prompt('Please enter a file name:', 'note.txt');
  if (fileName !== null) {
    const foldersList = Object.keys(folders);
    const folderName = prompt('Please choose a folder to save the file to:\n\n' + foldersList.join('\n').toUpperCase() + '\n\n', 'Personal');
    const folder = folders[folderName.toLowerCase()];
    if (folder !== undefined) {
      const files = JSON.parse(localStorage.getItem(folderName)) || [];
      if (files.find(file => file.name === fileName)) {
        if (!confirm('A file with that name already exists in the folder. Do you want to overwrite it?')) {
          return;
        }
      }
      const newFile = { name: fileName, content: textToSave };
      files.push(newFile);
      localStorage.setItem(folderName, JSON.stringify(files));
      const link = document.createElement('a');
      link.download = fileName;
      link.href = url;
      link.textContent = fileName;
      const listItem = createFileListItem(newFile);
      folder.appendChild(listItem);
      console.log('File saved to ' + folderName);
    } else {
      console.log('Folder does not exist.');
    }
  }
}

// Create a list item for a file object
function createFileListItem(file) {
  const link = document.createElement('a');
  link.textContent = file.name;
  link.addEventListener('click', () => {
    const textArea = document.querySelector('.newNoteDiv textarea');
    textArea.value = file.content;
  });

  const deleteBtn = document.createElement('button');
  deleteBtn.textContent = 'Delete';
  deleteBtn.addEventListener('click', () => {
    const files = JSON.parse(localStorage.getItem(folderName)) || [];
    const filteredFiles = files.filter(f => f.name !== file.name);
localStorage.setItem(folderName, JSON.stringify(filteredFiles));
const listItem = event.target.parentNode;
listItem.parentNode.removeChild(listItem);
console.log('File deleted from ' + folderName);
});

const listItem = document.createElement('li');
listItem.appendChild(link);
listItem.appendChild(deleteBtn);
return listItem;
}

// Display files in the default folder (Personal)
displayFiles('Personal');

// Display files for the selected folder
function displayFiles(folderName) {
const folder = folders[folderName.toLowerCase()];
if (folder !== undefined) {
folder.innerHTML = '';
const files = JSON.parse(localStorage.getItem(folderName)) || [];
files.forEach(file => {
const listItem = createFileListItem(file);
folder.appendChild(listItem);
});
} else {
console.log('Folder does not exist.');
}
}

// Switch between folders
const folderLinks = document.querySelectorAll('#folders a');
folderLinks.forEach(link => {
link.addEventListener('click', event => {
const folderName = event.target.dataset.folder;
displayFiles(folderName);
});
});

// Clear all files from localStorage
const clearBtn = document.getElementById('clear');
clearBtn.addEventListener('click', () => {
localStorage.clear();
Object.keys(folders).forEach(folderName => {
const folder = folders[folderName];
folder.innerHTML = '';
});
console.log('All files deleted.');
});

// Search functionality
const searchInput = document.getElementById('search');
searchInput.addEventListener('input', event => {
const query = event.target.value.toLowerCase();
const folderLinks = document.querySelectorAll('#folders a');
folderLinks.forEach(link => {
const folderName = link.dataset.folder.toLowerCase();
const folder = folders[folderName];
if (folder !== undefined) {
const files = JSON.parse(localStorage.getItem(folderName)) || [];
files.forEach(file => {
const listItem = folder.querySelector(li.contains('${file.name}'));
if (listItem !== null) {
const isMatch = file.name.toLowerCase().includes(query);
listItem.style.display = isMatch ? 'block' : 'none';
}
});
}
});
});




// Toggle nested list items
const itemsWithNestedLists = document.querySelectorAll('li > ul');
itemsWithNestedLists.forEach(item => {
  item.parentElement.addEventListener('click', () => {
    item.classList.toggle('open');
  });
});
